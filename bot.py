import json
import os
import random
import time
import html
from datetime import datetime, timedelta
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ")
CHANNEL_ID = "-1002899939309"
CHANNEL_LINK = "https://t.me/cabakoff"
ADMIN_ID = 1106828306

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CARDS_FILE = "cards.json"
USERS_FILE = "users.json"
TRADES_FILE = "trades.json"
BLACKLIST_FILE = "blacklist.json"
MODERATORS_FILE = "moderators.json"
COINS_FILE = "coins.json"
RARITIES_FILE = "rarities.json"
SHOP_FILE = "shop.json"
CARDS_IMAGE_DIR = "cards_images"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
ADMIN_CARD_NAME, ADMIN_CARD_RARITY, ADMIN_CARD_DESCRIPTION, ADMIN_CARD_IMAGE = range(4)
ADMIN_SHOP_NAME, ADMIN_SHOP_TYPE, ADMIN_SHOP_PRICE, ADMIN_SHOP_CARDS, ADMIN_SHOP_DURATION = range(5)
ADMIN_RARITY_NAME, ADMIN_RARITY_EMOJI, ADMIN_RARITY_DROPPABLE = range(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data(filename, default=None):
    if default is None:
        default = {}
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return default

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
def is_banned(user_id: int) -> bool:
    blacklist = load_data(BLACKLIST_FILE, [])
    return user_id in blacklist

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def is_subscribed(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
def is_moderator(user_id: int) -> bool:
    moderators = load_data(MODERATORS_FILE, [])
    return user_id in moderators

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–¥–º–∏–Ω –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
def has_admin_access(user_id: int) -> bool:
    return is_admin(user_id) or is_moderator(user_id)

# –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
def get_rarity_emoji(rarity_name: str) -> str:
    rarities = load_data(RARITIES_FILE, [])
    for rarity in rarities:
        if rarity["name"] == rarity_name:
            return rarity["emoji"]
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏
    emoji_map = {
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": "üî•",
        "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è": "üòé",
        "–ë–ª–µ—â–µ—Ç —É–º–æ–º": "üß†",
        "–≠–ø–∏—á–µ—Å–∫–∞—è": "üíé",
        "–†–µ–¥–∫–∞—è": "‚ú®",
        "–û–±—ã—á–Ω–∞—è": "üÉè"
    }
    return emoji_map.get(rarity_name, "üÉè")

async def show_collection_with_ids(user_id: int) -> str:
    users = load_data(USERS_FILE, {})
    user_data = users.get(str(user_id), {})
    user_cards = user_data.get("cards", [])
    
    if not user_cards:
        return "üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!"
    
    all_cards = load_data(CARDS_FILE, [])
    rarities = load_data(RARITIES_FILE, [])
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    card_counts = {}
    for card_id in user_cards:
        card_counts[card_id] = card_counts.get(card_id, 0) + 1
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    grouped = {}
    for card in all_cards:
        card_id = card["id"]
        if card_id in card_counts:
            if card["rarity"] not in grouped:
                grouped[card["rarity"]] = []
            grouped[card["rarity"]].append((card, card_counts[card_id]))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity_order = [r["name"] for r in rarities] + ["–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–ë–ª–µ—â–µ—Ç —É–º–æ–º", "–≠–ø–∏—á–µ—Å–∫–∞—è", "–†–µ–¥–∫–∞—è", "–û–±—ã—á–Ω–∞—è", "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è"]
    unique_rarities = list(set(grouped.keys()))
    sorted_rarities = sorted(unique_rarities, key=lambda r: rarity_order.index(r) if r in rarity_order else len(rarity_order))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üÉè <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫</b>:\n\n"
    total_count = 0
    
    for rarity in sorted_rarities:
        cards_in_rarity = grouped[rarity]
        count_in_rarity = sum(count for _, count in cards_in_rarity)
        total_count += count_in_rarity
        
        emoji = get_rarity_emoji(rarity)
        message += f"{emoji} <b>{rarity}</b> ({count_in_rarity}):\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID
        sorted_cards = sorted(cards_in_rarity, key=lambda x: x[0]['id'])
        
        for card, count in sorted_cards:
            count_text = f" (x{count})" if count > 1 else ""
            message += f"   ‚Ä¢ {html.escape(card['name'])}{count_text} [ID: {card['id']}]\n"
        
        message += "\n"
    
    message += f"üìö <b>–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total_count}</b>"
    return message

# –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_coins(user_id: int) -> int:
    coins_data = load_data(COINS_FILE, {})
    return coins_data.get(str(user_id), 0)

# –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_coins(user_id: int, amount: int) -> int:
    coins_data = load_data(COINS_FILE, {})
    current = coins_data.get(str(user_id), 0)
    new_amount = max(0, current + amount)
    coins_data[str(user_id)] = new_amount
    save_data(COINS_FILE, coins_data)
    return new_amount

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
        
    if not await is_subscribed(user.id, context):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–¥–µ—Å—å: {CHANNEL_LINK}\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start —Å–Ω–æ–≤–∞."
        )
        return

    users = load_data(USERS_FILE, {})
    if str(user.id) not in users:
        users[str(user.id)] = {
            "cards": [],
            "last_drop": 0,
            "username": user.username
        }
        save_data(USERS_FILE, users)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–µ—Ç
        coins_data = load_data(COINS_FILE, {})
        if str(user.id) not in coins_data:
            coins_data[str(user.id)] = 0
            save_data(COINS_FILE, coins_data)
        
        if is_admin(user.id):
            await update.message.reply_text(
                "üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/admin_addcard - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/admin_listcards - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫\n"
                "/admin_resettimer <user_id> - —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
                "/admin_givecard <user_id> <card_id> - –≤—ã–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/admin_broadcast <message> - —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
                "/ban <user_id> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/unban <user_id> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/add_moderator <user_id> - –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
                "/remove_moderator <user_id> - —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
                "/admin_givecoins <user_id> <amount> - –≤—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
                "/admin_removecoins <user_id> <amount> - –∑–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
                "/admin_addrarity - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å\n"
                "/admin_listrarities - —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π\n"
                "/admin_addshopitem - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω\n"
                "/admin_listshop - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                "–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/get_card - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/my_cards - –º–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
                "/trade - –æ–±–º–µ–Ω\n"
                "/shop - –º–∞–≥–∞–∑–∏–Ω\n"
                "/balance - –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç\n"
                "/card_info <card_id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ"
            )
        elif is_moderator(user.id):
            await update.message.reply_text(
                "üõ° –í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/admin_addcard - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/admin_listcards - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫\n"
                "/admin_addrarity - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å\n"
                "/admin_listrarities - —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π\n"
                "/admin_addshopitem - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω\n"
                "/admin_listshop - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                "–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/get_card - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/my_cards - –º–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
                "/trade - –æ–±–º–µ–Ω\n"
                "/shop - –º–∞–≥–∞–∑–∏–Ω\n"
                "/balance - –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç\n"
                "/card_info <card_id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ"
            )
        else:
            await context.bot.send_message(
                ADMIN_ID,
                f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} | ID: {user.id}"
            )
            await update.message.reply_text(
                "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ REKHL CARDS!\n\n"
                "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/get_card - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/my_cards - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
                "/trade - –û–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏\n"
                "/shop - –ú–∞–≥–∞–∑–∏–Ω\n"
                "/balance - –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç\n"
                "/card_info <card_id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ\n\n"
                "‚è≥ –ö–∞—Ä—Ç–æ—á–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤!"
            )
    else:
        if is_admin(user.id):
            await update.message.reply_text(
                "üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/admin_addcard - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/admin_listcards - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫\n"
                "/admin_resettimer <user_id> - —Å–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
                "/admin_givecard <user_id> <card_id> - –≤—ã–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/admin_broadcast <message> - —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
                "/ban <user_id> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/unban <user_id> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/add_moderator <user_id> - –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
                "/remove_moderator <user_id> - —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
                "/admin_givecoins <user_id> <amount> - –≤—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
                "/admin_removecoins <user_id> <amount> - –∑–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
                "/admin_addrarity - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å\n"
                "/admin_listrarities - —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π\n"
                "/admin_addshopitem - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω\n"
                "/admin_listshop - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                "–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/get_card - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/my_cards - –º–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
                "/trade - –æ–±–º–µ–Ω\n"
                "/shop - –º–∞–≥–∞–∑–∏–Ω\n"
                "/balance - –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç\n"
                "/card_info <card_id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ"
            )
        elif is_moderator(user.id):
            await update.message.reply_text(
                "üõ° –í—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/admin_addcard - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/admin_listcards - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫\n"
                "/admin_addrarity - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å\n"
                "/admin_listrarities - —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π\n"
                "/admin_addshopitem - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω\n"
                "/admin_listshop - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                "–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/get_card - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/my_cards - –º–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
                "/trade - –æ–±–º–µ–Ω\n"
                "/shop - –º–∞–≥–∞–∑–∏–Ω\n"
                "/balance - –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç\n"
                "/card_info <card_id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ"
            )
        else:
            await update.message.reply_text(
                "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ REKHL CARDS!\n\n"
                "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/get_card - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
                "/my_cards - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
                "/trade - –û–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏\n"
                "/shop - –ú–∞–≥–∞–∑–∏–Ω\n"
                "/balance - –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç\n"
                "/card_info <card_id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ\n\n"
                "‚è≥ –ö–∞—Ä—Ç–æ—á–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤!"
            )

# –í—ã–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def get_card(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
        
    if not await is_subscribed(user.id, context):
        await update.message.reply_text(f"‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_LINK}")
        return

    users = load_data(USERS_FILE, {})
    user_data = users.get(str(user.id), {})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    current_time = time.time()
    last_drop = user_data.get("last_drop", 0)
    cooldown = 6 * 3600  # 6 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    time_left = cooldown - (current_time - last_drop)
    
    if time_left > 0:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        hours = int(time_left // 3600)
        minutes = int((time_left % 3600) // 60)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hours > 0:
            time_text = f"{hours} —á–∞—Å(–æ–≤) –∏ {minutes} –º–∏–Ω—É—Ç(—ã)"
        else:
            time_text = f"{minutes} –º–∏–Ω—É—Ç(—ã)"
            
        await update.message.reply_text(
            f"‚è≥ –°–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑: {time_text}"
        )
        return

    # –í—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ç–æ–ª—å–∫–æ droppable —Ä–µ–¥–∫–æ—Å—Ç–∏)
    rarities = load_data(RARITIES_FILE, [])
    droppable_rarities = [r["name"] for r in rarities if r.get("droppable", True)]
    cards = [c for c in load_data(CARDS_FILE, []) if c["rarity"] in droppable_rarities]
    
    if not cards:
        await update.message.reply_text("‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    RARITY_CHANCES = {
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 0.05,
        "–ë–ª–µ—â–µ—Ç —É–º–æ–º": 0.07,
        "–≠–ø–∏—á–µ—Å–∫–∞—è": 0.15,
        "–†–µ–¥–∫–∞—è": 0.3,
        "–û–±—ã—á–Ω–∞—è": 0.5
    }
    
    # –í—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarities = list(RARITY_CHANCES.keys())
    weights = [RARITY_CHANCES[r] for r in rarities]
    chosen_rarity = random.choices(rarities, weights=weights, k=1)[0]
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity_cards = [c for c in cards if c["rarity"] == chosen_rarity]
    
    # –ï—Å–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
    if not rarity_cards:
        logger.warning(f"–î–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏ '{chosen_rarity}' –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫! –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏.")
        for rarity in rarities:
            rarity_cards = [c for c in cards if c["rarity"] == rarity]
            if rarity_cards:
                logger.info(f"–ù–∞—à–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏: {rarity}")
                break
    
    # –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
    if not rarity_cards:
        logger.error("–í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏!")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –∫–∞—Ä—Ç–æ—á–µ–∫! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    card = random.choice(rarity_cards)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "cards" not in user_data:
        user_data["cards"] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    user_data["cards"].append(card["id"])
    user_data["last_drop"] = current_time
    users[str(user.id)] = user_data
    save_data(USERS_FILE, users)

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç
    coins_earned = random.randint(10, 50)
    new_balance = update_coins(user.id, coins_earned)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    card_count = user_data["cards"].count(card["id"])
    count_text = f" (x{card_count})" if card_count > 1 else ""

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    caption = (
        f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É!\n\n"
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {card['name']}{count_text}\n"
        f"‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if "description" in card:
        caption += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {card['description']}\n"
    
    caption += (
        f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: +{coins_earned}\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance}\n\n"
        f"üìö –¢–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {len(user_data['cards'])}"
    )
    
    image_path = os.path.join(CARDS_IMAGE_DIR, card["image"])
    if os.path.exists(image_path):
        await update.message.reply_photo(
            photo=open(image_path, "rb"),
            caption=caption
        )
    else:
        logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        await update.message.reply_text(caption)

# –ü–æ–∫–∞–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_collection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
        
    if not await is_subscribed(user.id, context):
        await update.message.reply_text(f"‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_LINK}")
        return

    message = await show_collection_with_ids(user.id)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4000:
        parts = []
        current = ""
        for line in message.split("\n"):
            if len(current) + len(line) < 4000:
                current += line + "\n"
            else:
                parts.append(current)
                current = line + "\n"
        if current:
            parts.append(current)
        
        for part in parts:
            await update.message.reply_text(part, parse_mode="HTML")
    else:
        await update.message.reply_text(message, parse_mode="HTML")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–æ—á–∫–µ
async def card_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
        
    if not await is_subscribed(user.id, context):
        await update.message.reply_text(f"‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_LINK}")
        return

    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /card_info <ID –∫–∞—Ä—Ç–æ—á–∫–∏>")
        return
    
    try:
        card_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = load_data(USERS_FILE, {})
    user_data = users.get(str(user.id), {})
    if card_id not in user_data.get("cards", []):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏!")
        return
    
    # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±–∞–∑–µ
    cards = load_data(CARDS_FILE, [])
    card = next((c for c in cards if c["id"] == card_id), None)
    
    if not card:
        await update.message.reply_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    emoji = get_rarity_emoji(card["rarity"])
    caption = (
        f"üÉè <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–æ—á–∫–µ</b>\n\n"
        f"üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {card['name']}\n"
        f"{emoji} <b>–†–µ–¥–∫–æ—Å—Ç—å</b>: {card['rarity']}\n"
    )
    
    if "description" in card:
        caption += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {card['description']}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    card_count = user_data["cards"].count(card_id)
    caption += f"üìä <b>–í –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏</b>: {card_count} —à—Ç.\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = os.path.join(CARDS_IMAGE_DIR, card["image"])
    if os.path.exists(image_path):
        await update.message.reply_photo(
            photo=open(image_path, "rb"),
            caption=caption,
            parse_mode="HTML"
        )
    else:
        logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        await update.message.reply_text(caption, parse_mode="HTML")

# –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    balance = get_coins(user.id)
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç")

async def show_shop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    shop_items = load_data(SHOP_FILE, [])
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    current_time = time.time()
    active_items = [
        item for item in shop_items 
        if item.get("expire_time", 0) == 0 or item["expire_time"] > current_time
    ]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –º–∞–≥–∞–∑–∏–Ω–∞
    save_data(SHOP_FILE, active_items)
    
    if not active_items:
        await update.message.reply_text("üõí –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    message = "üõí –¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n\n"
    for item in active_items:
        message += f"üÜî ID: {item['id']}\n"
        message += f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}\n"
        message += f"üíµ –¶–µ–Ω–∞: {item['price']} –º–æ–Ω–µ—Ç\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if item.get("expire_time", 0) > 0:
            time_left = item["expire_time"] - current_time
            if time_left > 0:
                hours = int(time_left // 3600)
                minutes = int((time_left % 3600) // 60)
                message += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º–∏–Ω\n"
        
        if item["type"] == "reset":
            message += "üìù –¢–∏–ø: –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏\n\n"
        elif item["type"] == "pack":
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è len()
            message += "üìù –¢–∏–ø: –ù–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            message += f"üÉè –ö–∞—Ä—Ç–æ—á–µ–∫ –≤ –Ω–∞–±–æ—Ä–µ: {len(item['cards'])}\n\n"
    
    message += "‚ÑπÔ∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy <ID —Ç–æ–≤–∞—Ä–∞>"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(message) > 4000:
        parts = []
        while message:
            if len(message) <= 4000:
                parts.append(message)
                break
                
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 4000 —Å–∏–º–≤–æ–ª–æ–≤
            last_newline = message[:4000].rfind('\n')
            
            if last_newline == -1:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                parts.append(message[:4000])
                message = message[4000:]
            else:
                parts.append(message[:last_newline])
                message = message[last_newline+1:]
        
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(message)

async def buy_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy <ID —Ç–æ–≤–∞—Ä–∞>")
        return
    
    try:
        item_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ–≤–∞—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return
    
    shop_items = load_data(SHOP_FILE, [])
    item = next((i for i in shop_items if i["id"] == item_id), None)
    
    if not item:
        await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    current_time = time.time()
    if item.get("expire_time", 0) > 0 and item["expire_time"] < current_time:
        await update.message.reply_text("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏—Å—Ç–µ–∫!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = get_coins(user.id)
    if balance < item["price"]:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    new_balance = update_coins(user.id, -item["price"])
    
    if item["type"] == "reset":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        users = load_data(USERS_FILE, {})
        user_data = users.get(str(user.id), {})
        user_data["last_drop"] = 0
        users[str(user.id)] = user_data
        save_data(USERS_FILE, users)
        
        await update.message.reply_text(
            f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {item['price']} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {new_balance} –º–æ–Ω–µ—Ç\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å –ø–æ–º–æ—â—å—é /get_card"
        )
    
    elif item["type"] == "pack":
        # –í—ã–¥–∞–µ–º –û–î–ù–£ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –Ω–∞–±–æ—Ä–∞
        users = load_data(USERS_FILE, {})
        user_data = users.get(str(user.id), {})
        
        if "cards" not in user_data:
            user_data["cards"] = []
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –Ω–∞–±–æ—Ä–∞
        card_id = random.choice(item["cards"])
        user_data["cards"].append(card_id)
        
        users[str(user.id)] = user_data
        save_data(USERS_FILE, users)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
        cards = load_data(CARDS_FILE, [])
        card = next((c for c in cards if c["id"] == card_id), None)
        
        if card:
            card_name = card["name"]
            card_rarity = card["rarity"]
            emoji = get_rarity_emoji(card_rarity)
        else:
            card_name = f"–ö–∞—Ä—Ç–æ—á–∫–∞ ID {card_id}"
            card_rarity = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
            emoji = "‚ùì"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        card_count = user_data["cards"].count(card_id)
        count_text = f" (x{card_count})" if card_count > 1 else ""
        
        await update.message.reply_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫!\n"
            f"üéÅ –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞:\n"
            f"<b>{emoji} {card_rarity}</b>: {card_name}{count_text}\n\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {item['price']} –º–æ–Ω–µ—Ç\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {new_balance} –º–æ–Ω–µ—Ç\n\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é: /my_cards",
            parse_mode="HTML"
        )

# –°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞
async def start_trade(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
        
    if not await is_subscribed(user.id, context):
        return

    users = load_data(USERS_FILE, {})
    user_data = users.get(str(user.id), {})
    
    if not user_data.get("cards"):
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞!")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å ID –∫–∞—Ä—Ç–æ—á–µ–∫
    message = await show_collection_with_ids(user.id)
    message += "\n\nüîÑ –í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:"
    
    await update.message.reply_text(message, parse_mode="HTML")
    context.user_data["trade_state"] = "select_your_card"

async def handle_trade(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
        
    text = update.message.text
    state = context.user_data.get("trade_state")
    users = load_data(USERS_FILE, {})
    user_data = users.get(str(user.id), {})
    
    if state == "select_your_card":
        try:
            card_id = int(text)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
            if card_id not in user_data.get("cards", []):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏!")
                return
                
            context.user_data["your_card"] = card_id
            context.user_data["trade_state"] = "select_partner"
            await update.message.reply_text(
                "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–º–µ–Ω–∞:\n"
                "(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –±–æ—Ç—É)"
            )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

    elif state == "select_partner":
        try:
            partner_id = int(text)
            if partner_id == user.id:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            if is_banned(partner_id):
                await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
                return
                
            partner_data = users.get(str(partner_id))
            if not partner_data:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
                
            if not partner_data.get("cards"):
                await update.message.reply_text("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±–º–µ–Ω–∞!")
                return
                
            context.user_data["partner_id"] = partner_id
            context.user_data["trade_state"] = "select_their_card"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_collection = await show_collection_with_ids(partner_id)
            await update.message.reply_text(
                f"üÉè –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {partner_id}:\n\n{partner_collection}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
                parse_mode="HTML"
            )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

    elif state == "select_their_card":
        try:
            card_id = int(text)
            partner_id = context.user_data["partner_id"]
            partner_data = users.get(str(partner_id), {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            if card_id not in partner_data.get("cards", []):
                await update.message.reply_text("‚ùå –≠—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
                
            context.user_data["their_card"] = card_id
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            all_cards = load_data(CARDS_FILE, [])
            your_card = next((c for c in all_cards if c["id"] == context.user_data["your_card"]), None)
            their_card = next((c for c in all_cards if c["id"] == card_id), None)
            
            if not your_card or not their_card:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫!")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–º–µ–Ω –≤ —Ñ–∞–π–ª
            trades = load_data(TRADES_FILE, {})
            trade_id = f"{user.id}_{int(time.time())}"
            trades[trade_id] = {
                "from_user": user.id,
                "from_card": your_card["id"],
                "to_user": partner_id,
                "to_card": their_card["id"],
                "status": "pending"
            }
            save_data(TRADES_FILE, trades)
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±–º–µ–Ω", callback_data=f"confirm_trade_{trade_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_trade")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–º–µ–Ω:\n\n"
                f"–í—ã –æ—Ç–¥–∞–µ—Ç–µ: {your_card['name']} (ID: {your_card['id']})\n"
                f"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {their_card['name']} (ID: {their_card['id']})",
                reply_markup=reply_markup
            )
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–±–º–µ–Ω–∞
async def trade_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_banned(user_id):
        await query.edit_message_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
        
    data = query.data
    
    if data == "cancel_trade":
        await query.edit_message_text("‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω")
        return
    
    if data.startswith("confirm_trade_"):
        trade_id = data[len("confirm_trade_"):]
        trades = load_data(TRADES_FILE, {})
        trade = trades.get(trade_id)
        
        if not trade or trade["status"] != "pending":
            await query.edit_message_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±–º–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ!")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ü–ê–†–¢–ù–ï–†–£
        all_cards = load_data(CARDS_FILE, [])
        your_card = next((c for c in all_cards if c["id"] == trade["from_card"]), None)
        their_card = next((c for c in all_cards if c["id"] == trade["to_card"]), None)
        
        if not your_card or not their_card:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫!")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –æ–±–º–µ–Ω", callback_data=f"accept_trade_{trade_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_trade_{trade_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ü–ê–†–¢–ù–ï–†–£
            await context.bot.send_message(
                chat_id=trade["to_user"],
                text=f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–º–µ–Ω:\n\n"
                     f"–í—ã –æ—Ç–¥–∞–µ—Ç–µ: {their_card['name']} (ID: {their_card['id']})\n"
                     f"–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: {your_card['name']} (ID: {your_card['id']})\n\n"
                     "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–º–µ–Ω:",
                reply_markup=reply_markup
            )
            await query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω: {e}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É!")
    
    elif data.startswith("accept_trade_") or data.startswith("reject_trade_"):
        action = "accept" if data.startswith("accept_trade_") else "reject"
        trade_id = data[len("accept_trade_"):] if action == "accept" else data[len("reject_trade_"):]
        trades = load_data(TRADES_FILE, {})
        trade = trades.get(trade_id)
        
        if not trade or trade["status"] != "pending":
            await query.edit_message_text("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±–º–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ!")
            return
            
        if action == "reject":
            trades[trade_id]["status"] = "rejected"
            save_data(TRADES_FILE, trades)
            
            await query.edit_message_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±–º–µ–Ω–µ.")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            try:
                await context.bot.send_message(
                    trade["from_user"],
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {e}")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
        users = load_data(USERS_FILE, {})
        from_user_data = users.get(str(trade["from_user"]), {})
        to_user_data = users.get(str(trade["to_user"]), {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        if (trade["from_card"] not in from_user_data.get("cards", []) or 
            trade["to_card"] not in to_user_data.get("cards", [])):
            await query.edit_message_text("‚ùå –û–±–º–µ–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –∫–∞—Ä—Ç–æ—á–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
            return
            
        # –û–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        from_user_data["cards"].remove(trade["from_card"])
        from_user_data["cards"].append(trade["to_card"])
        
        to_user_data["cards"].remove(trade["to_card"])
        to_user_data["cards"].append(trade["from_card"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        users[str(trade["from_user"])] = from_user_data
        users[str(trade["to_user"])] = to_user_data
        save_data(USERS_FILE, users)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞
        trades[trade_id]["status"] = "completed"
        save_data(TRADES_FILE, trades)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await query.edit_message_text("‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        try:
            await context.bot.send_message(
                trade["from_user"],
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–±–º–µ–Ω! –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –ª—é–±—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_banned(user.id):
        await context.bot.delete_message(chat_id=message.chat_id, message_id=message.message_id)
        warn_msg = await message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        time.sleep(5)
        await context.bot.delete_message(chat_id=message.chat_id, message_id=warn_msg.message_id)
        return
    
    if not await is_subscribed(user.id, context):
        await context.bot.delete_message(chat_id=message.chat_id, message_id=message.message_id)
        warn_msg = await message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∑–¥–µ—Å—å: {CHANNEL_LINK}\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
        )
        time.sleep(10)
        await context.bot.delete_message(chat_id=message.chat_id, message_id=warn_msg.message_id)

# ====================== –ê–î–ú–ò–ù –ò –ú–û–î–ï–†–ê–¢–û–† –ö–û–ú–ê–ù–î–´ ====================== #

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
async def admin_addcard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not has_admin_access(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")
        return ConversationHandler.END
        
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏:")
    return ADMIN_CARD_NAME

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - —à–∞–≥ 1: –Ω–∞–∑–≤–∞–Ω–∏–µ
async def admin_card_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["new_card"] = {"name": update.message.text}
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    rarities = load_data(RARITIES_FILE, [])
    if not rarities:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é /admin_addrarity")
        return ConversationHandler.END
        
    rarities_text = "\n".join([f"{r['emoji']} {r['name']}" for r in rarities])
    
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n{rarities_text}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏:"
    )
    return ADMIN_CARD_RARITY

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - —à–∞–≥ 2: —Ä–µ–¥–∫–æ—Å—Ç—å
async def admin_card_rarity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    rarity = update.message.text.strip()
    rarities = load_data(RARITIES_FILE, [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
    if rarity not in [r["name"] for r in rarities]:
        await update.message.reply_text("‚ùå –†–µ–¥–∫–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ–¥–∫–æ—Å—Ç—å.")
        return ADMIN_CARD_RARITY
    
    context.user_data["new_card"]["rarity"] = rarity
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏:")
    return ADMIN_CARD_DESCRIPTION

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - —à–∞–≥ 3: –æ–ø–∏—Å–∞–Ω–∏–µ
async def admin_card_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["new_card"]["description"] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ñ–æ—Ç–æ):")
    return ADMIN_CARD_IMAGE

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - —à–∞–≥ 4: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
async def admin_card_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if not update.message.photo:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏!")
        return ADMIN_CARD_IMAGE
        
    photo = update.message.photo[-1]
    file = await photo.get_file()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(CARDS_IMAGE_DIR, exist_ok=True)
    
    filename = f"{int(time.time())}.jpg"
    image_path = os.path.join(CARDS_IMAGE_DIR, filename)
    
    await file.download_to_drive(image_path)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    new_card = context.user_data["new_card"]
    cards = load_data(CARDS_FILE, [])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
    new_id = max(card["id"] for card in cards) + 1 if cards else 1
    new_card["id"] = new_id
    new_card["image"] = filename
    
    cards.append(new_card)
    save_data(CARDS_FILE, cards)
    
    await update.message.reply_text(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ '{new_card['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    context.user_data.clear()
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
async def cancel_addcard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
async def admin_listcards(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not has_admin_access(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")
        return
        
    cards = load_data(CARDS_FILE, [])
    if not cards:
        await update.message.reply_text("‚ÑπÔ∏è –ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID
    sorted_cards = sorted(cards, key=lambda x: x["id"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:</b>\n\n"
    for card in sorted_cards:
        emoji = get_rarity_emoji(card["rarity"])
        message += (
            f"üÜî ID: {card['id']}\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {html.escape(card['name'])}\n"
            f"{emoji} –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n\n"
        )
    
    await update.message.reply_text(message, parse_mode="HTML")

# –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def admin_resettimer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin_resettimer <user_id>")
        return
        
    try:
        user_id = int(context.args[0])
        users = load_data(USERS_FILE, {})
        
        if str(user_id) not in users:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        users[str(user_id)]["last_drop"] = 0
        save_data(USERS_FILE, users)
        
        await update.message.reply_text(f"‚úÖ –¢–∞–π–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id, 
                "‚è± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–±—Ä–æ—Å–∏–ª –≤–∞—à —Ç–∞–π–º–µ—Ä!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ä–∞–∑—É —Å –ø–æ–º–æ—â—å—é /get_card"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

# –í—ã–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def admin_givecard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
        
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –∫–∞—Ä—Ç–æ—á–∫–∏: /admin_givecard <user_id> <card_id>")
        return
        
    try:
        user_id = int(context.args[0])
        card_id = int(context.args[1])
        
        users = load_data(USERS_FILE, {})
        cards = load_data(CARDS_FILE, [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        card = next((c for c in cards if c["id"] == card_id), None)
        if not card:
            await update.message.reply_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if str(user_id) not in users:
            users[str(user_id)] = {"cards": [], "last_drop": 0}
        
        users[str(user_id)]["cards"].append(card_id)
        save_data(USERS_FILE, users)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        card_count = users[str(user_id)]["cards"].count(card_id)
        count_text = f" (x{card_count})" if card_count > 1 else ""
        
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ '{card['name']}{count_text}' –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id,
                f"üéÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –∫–∞—Ä—Ç–æ—á–∫—É!\n\n"
                f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {card['name']}{count_text}\n"
                f"‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {card.get('description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: /admin_broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
        
    message = " ".join(context.args)
    users = load_data(USERS_FILE, {})
    blacklist = load_data(BLACKLIST_FILE, [])
    
    count = 0
    errors = 0
    
    for user_id in users:
        uid = int(user_id)
        if uid in blacklist:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            
        try:
            await context.bot.send_message(
                chat_id=uid, 
                text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}"
            )
            count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")
            errors += 1
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        f"–û—à–∏–±–æ–∫: {errors}"
    )

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def admin_ban(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /ban <user_id>")
        return
        
    try:
        user_id = int(context.args[0])
        
        # –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id == ADMIN_ID:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
            
        blacklist = load_data(BLACKLIST_FILE, [])
        
        if user_id in blacklist:
            await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
            
        blacklist.append(user_id)
        save_data(BLACKLIST_FILE, blacklist)
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id,
                "‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def admin_unban(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unban <user_id>")
        return
        
    try:
        user_id = int(context.args[0])
        blacklist = load_data(BLACKLIST_FILE, [])
        
        if user_id not in blacklist:
            await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
            
        blacklist.remove(user_id)
        save_data(BLACKLIST_FILE, blacklist)
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id,
                "üéâ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async def add_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /add_moderator <user_id>")
        return
        
    try:
        user_id = int(context.args[0])
        moderators = load_data(MODERATORS_FILE, [])
        
        if user_id in moderators:
            await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            return
            
        moderators.append(user_id)
        save_data(MODERATORS_FILE, moderators)
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id,
                "üéâ –í–∞–º –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

# –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async def remove_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
        
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /remove_moderator <user_id>")
        return
        
    try:
        user_id = int(context.args[0])
        moderators = load_data(MODERATORS_FILE, [])
        
        if user_id not in moderators:
            await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            return
            
        moderators.remove(user_id)
        save_data(MODERATORS_FILE, moderators)
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–æ–ª—å—à–µ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id,
                "‚ÑπÔ∏è –£ –≤–∞—Å –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

# –í—ã–¥–∞—á–∞ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def admin_givecoins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
        
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç: /admin_givecoins <user_id> <amount>")
        return
        
    try:
        user_id = int(context.args[0])
        amount = int(context.args[1])
        
        if amount <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
            
        new_balance = update_coins(user_id, amount)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id,
                f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º {amount} –º–æ–Ω–µ—Ç!\n"
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

# –ò–∑—ä—è—Ç–∏–µ –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def admin_removecoins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
        
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç: /admin_removecoins <user_id> <amount>")
        return
        
    try:
        user_id = int(context.args[0])
        amount = int(context.args[1])
        
        if amount <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return
            
        new_balance = update_coins(user_id, -amount)
        await update.message.reply_text(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑—ä—è—Ç–æ {amount} –º–æ–Ω–µ—Ç!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                user_id,
                f"‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑—ä—è–ª —É –≤–∞—Å {amount} –º–æ–Ω–µ—Ç.\n"
                f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
async def admin_addrarity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not has_admin_access(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")
        return ConversationHandler.END
        
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏:")
    return ADMIN_RARITY_NAME

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ - —à–∞–≥ 1: –Ω–∞–∑–≤–∞–Ω–∏–µ
async def admin_rarity_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["new_rarity"] = {"name": update.message.text}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏:")
    return ADMIN_RARITY_EMOJI

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ - —à–∞–≥ 2: —Å–º–∞–π–ª–∏–∫
async def admin_rarity_emoji(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["new_rarity"]["emoji"] = update.message.text
    await update.message.reply_text(
        "–ú–æ–≥—É—Ç –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –≤—ã–ø–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ /get_card?\n"
        "1 - –î–∞, 0 - –ù–µ—Ç:"
    )
    return ADMIN_RARITY_DROPPABLE

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ - —à–∞–≥ 3: droppable —Ñ–ª–∞–≥
async def admin_rarity_droppable(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        droppable = int(update.message.text)
        if droppable not in [0, 1]:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 0.")
        return ADMIN_RARITY_DROPPABLE
    
    new_rarity = context.user_data["new_rarity"]
    new_rarity["droppable"] = bool(droppable)
    
    rarities = load_data(RARITIES_FILE, [])
    rarities.append(new_rarity)
    save_data(RARITIES_FILE, rarities)
    
    await update.message.reply_text(
        f"‚úÖ –†–µ–¥–∫–æ—Å—Ç—å '{new_rarity['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        f"–°–º–∞–π–ª–∏–∫: {new_rarity['emoji']}\n"
        f"–í—ã–ø–∞–¥–∞–µ—Ç —á–µ—Ä–µ–∑ /get_card: {'–î–∞' if new_rarity['droppable'] else '–ù–µ—Ç'}"
    )
    context.user_data.clear()
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
async def cancel_addrarity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
async def admin_listrarities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not has_admin_access(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")
        return
        
    rarities = load_data(RARITIES_FILE, [])
    if not rarities:
        await update.message.reply_text("‚ÑπÔ∏è –†–µ–¥–∫–æ—Å—Ç–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    message = "<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π:</b>\n\n"
    for rarity in rarities:
        message += (
            f"{rarity['emoji']} <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {html.escape(rarity['name'])}\n"
            f"üì¶ –í—ã–ø–∞–¥–∞–µ—Ç —á–µ—Ä–µ–∑ /get_card: {'–î–∞' if rarity.get('droppable', True) else '–ù–µ—Ç'}\n\n"
        )
    
    await update.message.reply_text(message, parse_mode="HTML")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
async def admin_addshopitem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not has_admin_access(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")
        return ConversationHandler.END
        
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    return ADMIN_SHOP_NAME

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 1: –Ω–∞–∑–≤–∞–Ω–∏–µ
async def admin_shop_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["new_shop_item"] = {"name": update.message.text}
    
    keyboard = [
        [InlineKeyboardButton("–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞", callback_data="reset")],
        [InlineKeyboardButton("–ù–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="pack")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=reply_markup
    )
    return ADMIN_SHOP_TYPE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
async def admin_shop_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    item_type = query.data
    context.user_data["new_shop_item"]["type"] = item_type
    
    await query.edit_message_text(
        f"–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {'–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞' if item_type == 'reset' else '–ù–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫'}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:"
    )
    return ADMIN_SHOP_PRICE

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 2: —Ü–µ–Ω–∞
async def admin_shop_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        price = int(update.message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return ADMIN_SHOP_PRICE
    
    context.user_data["new_shop_item"]["price"] = price
    
    if context.user_data["new_shop_item"]["type"] == "reset":
        # –î–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –Ω—É–∂–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —á–∞—Å–∞—Ö (0 - –±–µ—Å—Å—Ä–æ—á–Ω–æ):\n"
            "–ü—Ä–∏–º–µ—Ä: 24 - —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω 24 —á–∞—Å–∞"
        )
        return ADMIN_SHOP_DURATION
    else:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ –Ω–∞–±–æ—Ä–µ:\n"
            "(–ü—Ä–∏–º–µ—Ä: 1 5 7 12)"
        )
        return ADMIN_SHOP_CARDS

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 3: –∫–∞—Ä—Ç–æ—á–∫–∏ (–¥–ª—è –Ω–∞–±–æ—Ä–∞)
async def admin_shop_cards(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        card_ids = [int(id_str) for id_str in update.message.text.split()]
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.")
        return ADMIN_SHOP_CARDS
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    cards = load_data(CARDS_FILE, [])
    existing_ids = [card["id"] for card in cards]
    
    for card_id in card_ids:
        if card_id not in existing_ids:
            await update.message.reply_text(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ —Å ID {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return ADMIN_SHOP_CARDS
    
    context.user_data["new_shop_item"]["cards"] = card_ids
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —á–∞—Å–∞—Ö (0 - –±–µ—Å—Å—Ä–æ—á–Ω–æ):\n"
        "–ü—Ä–∏–º–µ—Ä: 24 - —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω 24 —á–∞—Å–∞"
    )
    return ADMIN_SHOP_DURATION

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - —à–∞–≥ 4: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
async def admin_shop_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        duration = float(update.message.text)
        if duration < 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (0 –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞).")
        return ADMIN_SHOP_DURATION
    
    new_item = context.user_data["new_shop_item"]
    shop_items = load_data(SHOP_FILE, [])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if duration > 0:
        new_item["expire_time"] = time.time() + duration * 3600
    else:
        new_item["expire_time"] = 0
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
    new_id = max(item["id"] for item in shop_items) + 1 if shop_items else 1
    new_item["id"] = new_id
    
    shop_items.append(new_item)
    save_data(SHOP_FILE, shop_items)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"‚úÖ –¢–æ–≤–∞—Ä '{html.escape(new_item['name'])}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
    message += f"üíµ –¶–µ–Ω–∞: {new_item['price']} –º–æ–Ω–µ—Ç\n"
    message += f"üìù –¢–∏–ø: {'–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞' if new_item['type'] == 'reset' else '–ù–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫'}\n"
    
    if duration > 0:
        hours = int(duration)
        minutes = int((duration - hours) * 60)
        message += f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º–∏–Ω\n"
    else:
        message += "‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –±–µ—Å—Å—Ä–æ—á–Ω–æ\n"
    
    if new_item["type"] == "pack":
        card_names = [str(card_id) for card_id in new_item["cards"]]
        message += f"üÉè –ö–∞—Ä—Ç–æ—á–∫–∏: {', '.join(card_names)}\n"
    
    await update.message.reply_text(message)
    context.user_data.clear()
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async def cancel_addshopitem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
async def admin_listshop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not has_admin_access(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")
        return
        
    shop_items = load_data(SHOP_FILE, [])
    current_time = time.time()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    active_items = [
        item for item in shop_items 
        if item.get("expire_time", 0) == 0 or item["expire_time"] > current_time
    ]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –º–∞–≥–∞–∑–∏–Ω–∞
    save_data(SHOP_FILE, active_items)
    
    if not active_items:
        await update.message.reply_text("üõí –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç!")
        return
    
    message = "üõí <b>–¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ</b>\n\n"
    for item in active_items:
        message += f"üÜî <b>ID</b>: {item['id']}\n"
        message += f"üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {html.escape(item['name'])}\n"
        message += f"üíµ <b>–¶–µ–Ω–∞</b>: {item['price']} –º–æ–Ω–µ—Ç\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if item.get("expire_time", 0) > 0:
            time_left = item["expire_time"] - current_time
            if time_left > 0:
                hours = int(time_left // 3600)
                minutes = int((time_left % 3600) // 60)
                message += f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å</b>: {hours}—á {minutes}–º–∏–Ω\n"
            else:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
        
        if item["type"] == "reset":
            message += "üìù <b>–¢–∏–ø</b>: –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏\n\n"
        elif item["type"] == "pack":
            message += "üìù <b>–¢–∏–ø</b>: –ù–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫\n"
            card_names = ", ".join([str(card_id) for card_id in item["cards"]])
            message += f"üÉè <b>–ö–∞—Ä—Ç–æ—á–∫–∏</b>: {card_names}\n\n"
    
    await update.message.reply_text(message, parse_mode="HTML")

# ====================== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================== #

def main() -> None:
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    os.makedirs(CARDS_IMAGE_DIR, exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(CARDS_FILE):
        save_data(CARDS_FILE, [
            {
                "id": 1,
                "name": "–¢—É–º–±–∞",
                "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
                "image": "tumba.png",
                "description": "x2 –ß–µ–º–ø–∏–æ–Ω –†–ï–ö–•–õ"
            },
            {
                "id": 2,
                "name": "–¢–∏–º–∞—Ö–µ–∑",
                "rarity": "–†–µ–¥–∫–∞—è",
                "image": "tima.png",
                "description": "–¢–∏–º–∞–∫–µ–∑ –¥–æ—Ç–∞ 2"
            },
            {
                "id": 3,
                "name": "–ö–∞–∑—É–º–∞",
                "rarity": "–≠–ø–∏—á–µ—Å–∫–∞—è",
                "image": "kazuma.png",
                "description": "–ê–ª–∫–∞—à"
            },
            {
                "id": 4,
                "name": "–ö–∏—Ç–∞–µ—Ü",
                "rarity": "–û–±—ã—á–Ω–∞—è",
                "image": "kitaec.png",
                "description": "–£–∑–∫–æ–≥–ª–∞–∑—ã–π"
            }
        ])
    
    if not os.path.exists(USERS_FILE):
        save_data(USERS_FILE, {})
        
    if not os.path.exists(TRADES_FILE):
        save_data(TRADES_FILE, {})
        
    if not os.path.exists(BLACKLIST_FILE):
        save_data(BLACKLIST_FILE, [])
    
    if not os.path.exists(MODERATORS_FILE):
        save_data(MODERATORS_FILE, [])
    
    if not os.path.exists(COINS_FILE):
        save_data(COINS_FILE, {})
    
    if not os.path.exists(RARITIES_FILE):
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
        save_data(RARITIES_FILE, [
            {"name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "emoji": "üî•", "droppable": True},
            {"name": "–ë–ª–µ—â–µ—Ç —É–º–æ–º", "emoji": "üß†", "droppable": True},
            {"name": "–≠–ø–∏—á–µ—Å–∫–∞—è", "emoji": "üíé", "droppable": True},
            {"name": "–†–µ–¥–∫–∞—è", "emoji": "‚ú®", "droppable": True},
            {"name": "–û–±—ã—á–Ω–∞—è", "emoji": "üÉè", "droppable": True},
            {"name": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è", "emoji": "üòé", "droppable": False}
        ])
    
    if not os.path.exists(SHOP_FILE):
        save_data(SHOP_FILE, [])

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    addcard_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("admin_addcard", admin_addcard)],
        states={
            ADMIN_CARD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_card_name)],
            ADMIN_CARD_RARITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_card_rarity)],
            ADMIN_CARD_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_card_description)],
            ADMIN_CARD_IMAGE: [MessageHandler(filters.PHOTO | filters.Document.IMAGE, admin_card_image)],
        },
        fallbacks=[CommandHandler("cancel", cancel_addcard)],
    )
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    addrarity_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("admin_addrarity", admin_addrarity)],
        states={
            ADMIN_RARITY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_rarity_name)],
            ADMIN_RARITY_EMOJI: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_rarity_emoji)],
            ADMIN_RARITY_DROPPABLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_rarity_droppable)],
        },
        fallbacks=[CommandHandler("cancel", cancel_addrarity)],
    )
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω
    addshopitem_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("admin_addshopitem", admin_addshopitem)],
        states={
            ADMIN_SHOP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_shop_name)],
            ADMIN_SHOP_TYPE: [CallbackQueryHandler(admin_shop_type)],
            ADMIN_SHOP_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_shop_price)],
            ADMIN_SHOP_CARDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_shop_cards)],
            ADMIN_SHOP_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_shop_duration)],
        },
        fallbacks=[CommandHandler("cancel", cancel_addshopitem)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(addcard_conv_handler)
    application.add_handler(addrarity_conv_handler)
    application.add_handler(addshopitem_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("get_card", get_card))
    application.add_handler(CommandHandler("my_cards", show_collection))
    application.add_handler(CommandHandler("trade", start_trade))
    application.add_handler(CommandHandler("card_info", card_info))
    application.add_handler(CommandHandler("balance", show_balance))
    application.add_handler(CommandHandler("shop", show_shop))
    application.add_handler(CommandHandler("buy", buy_item))
    
    application.add_handler(CommandHandler("admin_listcards", admin_listcards))
    application.add_handler(CommandHandler("admin_resettimer", admin_resettimer))
    application.add_handler(CommandHandler("admin_givecard", admin_givecard))
    application.add_handler(CommandHandler("admin_broadcast", admin_broadcast))
    application.add_handler(CommandHandler("ban", admin_ban))
    application.add_handler(CommandHandler("unban", admin_unban))
    application.add_handler(CommandHandler("add_moderator", add_moderator))
    application.add_handler(CommandHandler("remove_moderator", remove_moderator))
    application.add_handler(CommandHandler("admin_givecoins", admin_givecoins))
    application.add_handler(CommandHandler("admin_removecoins", admin_removecoins))
    application.add_handler(CommandHandler("admin_listrarities", admin_listrarities))
    application.add_handler(CommandHandler("admin_listshop", admin_listshop))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(trade_button, pattern=r"^(confirm_trade_|accept_trade_|reject_trade_|cancel_trade)"))
    application.add_handler(CallbackQueryHandler(admin_shop_type, pattern=r"^(reset|pack)"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trade))
    application.add_handler(MessageHandler(filters.ALL, check_subscription))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()